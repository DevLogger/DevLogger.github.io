<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DevLog</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 19 Nov 2016 00:47:15 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>TypeScript - Resolvendo o Duplicate Identifier Error</title>
      <link>http://yoursite.com/2016/11/16/TypesDuplicateIdentifier/</link>
      <guid>http://yoursite.com/2016/11/16/TypesDuplicateIdentifier/</guid>
      <pubDate>Thu, 17 Nov 2016 00:59:42 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;TypeScript-Resolvendo-o-Duplicate-Identifier-Error&quot;&gt;&lt;a href=&quot;#TypeScript-Resolvendo-o-Duplicate-Identifier-Error&quot; class=&quot;headerlink&quot;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="TypeScript-Resolvendo-o-Duplicate-Identifier-Error"><a href="#TypeScript-Resolvendo-o-Duplicate-Identifier-Error" class="headerlink" title="TypeScript - Resolvendo o Duplicate Identifier Error"></a>TypeScript - Resolvendo o Duplicate Identifier Error</h1><p>Um dos problemas mais chatos que você pode encontrar quando for usar TypeScript é:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Duplicate identifier...</div></pre></td></tr></table></figure>
<p>ou </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">message TS4090: Conflicting definitions for...</div></pre></td></tr></table></figure>
<p>Isto acontece quando o compilador tenta carregar o mesmo módulo ou definição (.d.ts) mais de uma vez, identificando que este está duplicado. Quando se instala uma dependência via <strong><em>npm install</em></strong>, o <strong><em>npm</em></strong> já identifica se o módulo está baixado evitando duplicação, mas, se você esta usando módulos locais com <strong><em>npm link</em></strong>, é quase certo que terá este problema.</p>
<p>Este erro não impede que o JavaScript seja gerado, mas aqui pra nós, é muito chato ver milhares de erro no seu console quando mandamos executar ou compilar algo.</p>
<h2 id="Resolucao"><a href="#Resolucao" class="headerlink" title="Resolução"></a>Resolução</h2><h4 id="Atualize-a-versao-do-TypeScript"><a href="#Atualize-a-versao-do-TypeScript" class="headerlink" title="Atualize a versao do TypeScript"></a>Atualize a versao do TypeScript</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install typescript -g</div></pre></td></tr></table></figure>
<h4 id="Configuracao-do-compilador"><a href="#Configuracao-do-compilador" class="headerlink" title="Configuração do compilador"></a>Configuração do compilador</h4><p>Coloque esta configuração do seu <strong>tsconfig.json</strong>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">"compilerOptions" &#123;</div><div class="line">     ....</div><div class="line">    "baseUrl": "./",</div><div class="line">    "paths": &#123;</div><div class="line">        "*": [ "node_modules/@types/*", "*"]</div><div class="line">    &#125;</div><div class="line">   ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Isto informará ao compilador que quando ele for resolver um módulo qualquer, procure primeiro em  <code>.\node_modules\@types\</code> e so depois nos demais locais, evitando a duplicidade do carregamento.</p>
<h2 id="Referencias"><a href="#Referencias" class="headerlink" title="Referências"></a>Referências</h2><ul>
<li><a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html" target="_blank" rel="external">https://www.typescriptlang.org/docs/handbook/module-resolution.html</a></li>
<li><a href="https://github.com/Microsoft/TypeScript/issues/11916#event-853609143" target="_blank" rel="external">https://github.com/Microsoft/TypeScript/issues/11916#event-853609143</a>   </li>
</ul>
<p><em>Obrigado <a href="https://github.com/mhegazy" target="_blank" rel="external">@mhegazy</a> pela dica!!</em></p>
]]></content:encoded>
      
      <comments>http://yoursite.com/2016/11/16/TypesDuplicateIdentifier/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Crie sua API REST com ProtonType</title>
      <link>http://yoursite.com/2016/11/15/ProtonType/</link>
      <guid>http://yoursite.com/2016/11/15/ProtonType/</guid>
      <pubDate>Tue, 15 Nov 2016 17:22:30 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;ProtonType&quot;&gt;&lt;a href=&quot;#ProtonType&quot; class=&quot;headerlink&quot; title=&quot;ProtonType&quot;&gt;&lt;/a&gt;ProtonType&lt;/h1&gt;&lt;p&gt;Um simples web framework feito em Type
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="ProtonType"><a href="#ProtonType" class="headerlink" title="ProtonType"></a>ProtonType</h1><p>Um simples web framework feito em TypeScript.</p>
<p>O ProtonType tem como objetivo tornar simples e agradável o desensolvimento de APIs REST e criação de modelos de banco de dados. Utilizando <a href="http://expressjs.com/" target="_blank" rel="external">Express</a> e <a href="http://docs.sequelizejs.com/" target="_blank" rel="external">Sequelize ORM</a> ajuda na criação de aplicações web robustas.</p>
<h1 id="Configuracao-do-projeto-TypeScript"><a href="#Configuracao-do-projeto-TypeScript" class="headerlink" title="Configuração do projeto TypeScript"></a>Configuração do projeto TypeScript</h1><p>As seguintes configurações no <strong>tsconfig.json</strong> são necessárias para o<br>funcionamento.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="attr">"compilerOptions"</span>: &#123;</div><div class="line">    <span class="attr">"target"</span>: <span class="string">"es6"</span>,</div><div class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</div><div class="line">    <span class="attr">"emitDecoratorMetadata"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Instalacao"><a href="#Instalacao" class="headerlink" title="Instalação"></a>Instalação</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">npm install protontype --save</div></pre></td></tr></table></figure>
<h1 id="Quick-Start-Criando-uma-API-Completa-em-5-passos"><a href="#Quick-Start-Criando-uma-API-Completa-em-5-passos" class="headerlink" title="Quick Start - Criando uma API Completa em 5 passos"></a>Quick Start - Criando uma API Completa em 5 passos</h1><h2 id="Estrutura-de-pastas-e-configuracoes-iniciais"><a href="#Estrutura-de-pastas-e-configuracoes-iniciais" class="headerlink" title="Estrutura de pastas e configurações iniciais"></a>Estrutura de pastas e configurações iniciais</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">mkdir proton-quickstart</div><div class="line"><span class="built_in">cd</span> proton-quickstart</div><div class="line">npm init</div><div class="line">mkdir src</div><div class="line">npm install protontype --save</div></pre></td></tr></table></figure>
<p>Criar o arquivo tsconfig.json na raiz do projeto</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="attr">"compilerOptions"</span>: &#123;</div><div class="line">    <span class="attr">"target"</span>: <span class="string">"es6"</span>,</div><div class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</div><div class="line">    <span class="attr">"emitDecoratorMetadata"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"outDir"</span>: <span class="string">"dist"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"exclude"</span>: [</div><div class="line">    <span class="string">"node_modules"</span>,</div><div class="line">    <span class="string">"dist"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>Criar um arquivo ParticlesModel.ts</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; BaseModel, SequelizeBaseModelAttr, Model, DataTypes &#125; <span class="keyword">from</span> <span class="string">'protontype'</span>;</div><div class="line"></div><div class="line">@Model(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"Particles"</span>,</div><div class="line">    <span class="attr">definition</span>: &#123;</div><div class="line">        <span class="attr">name</span>: &#123;</div><div class="line">            <span class="attr">type</span>: DataTypes.STRING</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">symbol</span>: &#123;</div><div class="line">            <span class="attr">type</span>: DataTypes.STRING</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">mass</span>: &#123;</div><div class="line">            <span class="attr">type</span>: DataTypes.BIGINT</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticlesModel</span> <span class="keyword">extends</span> <span class="title">BaseModel</span>&lt;<span class="title">Particle</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> interface Particle extends SequelizeBaseModelAttr &#123;</div><div class="line">    <span class="attr">name</span>: string;</div><div class="line">    symbol: string;</div><div class="line">    mass: number;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><p>Criar arquivo ParticlesRouter.ts</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; ParticlesModel &#125; <span class="keyword">from</span> <span class="string">'./ParticlesModel'</span>;</div><div class="line"><span class="keyword">import</span> &#123; BaseCrudRouter, RouterClass &#125; <span class="keyword">from</span> <span class="string">'protontype'</span>;</div><div class="line"></div><div class="line">@RouterClass(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">'/particles'</span>,</div><div class="line">    <span class="attr">modelInstances</span>: [<span class="keyword">new</span> ParticlesModel()]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticlesRouter</span> <span class="keyword">extends</span> <span class="title">BaseCrudRouter</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h2><p>Criar arquivo Main.ts</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; ParticlesRouter &#125; <span class="keyword">from</span> <span class="string">'./ParticlesRouter'</span>;</div><div class="line"><span class="keyword">import</span> &#123; ExpressApplication &#125; <span class="keyword">from</span> <span class="string">'protontype'</span>;</div><div class="line"></div><div class="line"><span class="keyword">new</span> ExpressApplication()</div><div class="line">    .addRouter(<span class="keyword">new</span> ParticlesRouter())</div><div class="line">    .bootstrap();</div></pre></td></tr></table></figure>
<p><strong>Compilando e Rodando Aplicação</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">tsc</div><div class="line">node dist/Main.ts</div></pre></td></tr></table></figure></p>
<h2 id="Testando-a-API"><a href="#Testando-a-API" class="headerlink" title="Testando a API"></a>Testando a API</h2><p>Por padrão, a aplicação usará um banco de dados sqlite.<br>Será criado um arquivo proton.sqlite na raiz do projeto.</p>
<p>Os endpoints abaixo já estarão disponíveis:</p>
<ul>
<li><strong>GET /particles</strong> - Lista todos os registos da tabela Particles</li>
<li><strong>POST /particles</strong> - Cria um registro na tabela Particles</li>
<li><strong>GET /particles/:id</strong> - Consulta um registro da tabela Particles</li>
<li><strong>PUT /particles/:id</strong> - Atualiza um registro da tabela Particles</li>
<li><strong>DELETE /particles/:id</strong> - Remove um registro da tabela Particles</li>
</ul>
<p>Podera testar através do app <a href="https://www.getpostman.com/" target="_blank" rel="external">Postman</a> ou outro da sua preferência.</p>
<p><strong>Código completo do quick start</strong></p>
<p><a href="https://github.com/linck/proton-quickstart" target="_blank" rel="external">https://github.com/linck/proton-quickstart</a></p>
<h1 id="Guia-Completo"><a href="#Guia-Completo" class="headerlink" title="Guia Completo"></a>Guia Completo</h1><h2 id="Configurando-aplicacao"><a href="#Configurando-aplicacao" class="headerlink" title="Configurando aplicação"></a><strong>Configurando aplicação</strong></h2><p>Criar um arquivo chamado <strong>proton.json</strong> na raiz do projeto. </p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"port"</span>: <span class="string">"3000"</span>,</div><div class="line">  <span class="attr">"database"</span>: &#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"proton-example"</span>,</div><div class="line">    <span class="attr">"username"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"password"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"options"</span>: &#123;</div><div class="line">      <span class="attr">"dialect"</span>: <span class="string">"sqlite"</span>,</div><div class="line">      <span class="attr">"storage"</span>: <span class="string">"proton.sqlite"</span>,</div><div class="line">      <span class="attr">"define"</span>: &#123;</div><div class="line">        <span class="attr">"underscored"</span>: <span class="string">"true"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"defaultRoutes"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"cors"</span>: &#123;</div><div class="line">    <span class="attr">"origin"</span>: [<span class="string">"*"</span>],</div><div class="line">    <span class="attr">"methods"</span>: [<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"OPTIONS"</span>, <span class="string">"PUT"</span>, <span class="string">"PATCH"</span>, <span class="string">"DELETE"</span>],</div><div class="line">    <span class="attr">"allowedHeaders"</span>: [<span class="string">"Content-Type"</span>, <span class="string">"Authorization"</span>]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"jwtSecret"</span>: <span class="string">"Pr0t0nT1p3"</span>,</div><div class="line">  <span class="attr">"jwtSession"</span>: &#123;</div><div class="line">    <span class="attr">"session"</span>: <span class="literal">false</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"https"</span>: &#123;</div><div class="line">    <span class="attr">"key"</span>: <span class="string">"./protontype.key"</span>,</div><div class="line">    <span class="attr">"cert"</span>: <span class="string">"./protontype.cert"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Criando-Models"><a href="#Criando-Models" class="headerlink" title="Criando Models"></a><strong>Criando Models</strong></h2><p>O <strong>ProtonType</strong> usa o <a href="http://docs.sequelizejs.com/en/v3/" target="_blank" rel="external"><strong>ORM Sequelize</strong></a> para criação dos Models e acesso ao banco de dados.</p>
<p>Para criar um Model, deve-se criar uma classe que <em>extends</em> de <strong>BaseModel</strong>. O<br>mapeamento do banco de dados é feita a através da anotação @Model que possui os<br>seguntes parâmetros:</p>
<ul>
<li><strong>name</strong>: Nome do model</li>
<li><strong>definition</strong>: Definição das colunas. O objeto usado para as definições é o mesmo de<br><a href="http://docs.sequelizejs.com/en/v3/docs/models-definition/" target="_blank" rel="external">definição do<br>Sequelize</a>.</li>
</ul>
<p>Exemplo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; ModelNames &#125; <span class="keyword">from</span> <span class="string">'./ModelNames'</span>;</div><div class="line"><span class="keyword">import</span> &#123; BaseModel, BelongsTo, DataTypes, Model, SequelizeBaseModelAttr &#125; <span class="keyword">from</span> <span class="string">'protontype'</span>;</div><div class="line"></div><div class="line">@Model(&#123;</div><div class="line">    <span class="attr">name</span>: ModelNames.TASKS,</div><div class="line">    <span class="attr">definition</span>: &#123;</div><div class="line">        <span class="attr">title</span>: &#123;</div><div class="line">            <span class="attr">type</span>: DataTypes.STRING,</div><div class="line">            <span class="attr">allowNull</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">validate</span>: &#123;</div><div class="line">                <span class="attr">notEmpty</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">done</span>: &#123;</div><div class="line">            <span class="attr">type</span>: DataTypes.BOOLEAN,</div><div class="line">            <span class="attr">allowNull</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">defaultValue</span>: <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TasksModel</span> <span class="keyword">extends</span> <span class="title">BaseModel</span>&lt;<span class="title">Task</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> interface Task extends SequelizeBaseModelAttr &#123;</div><div class="line">    <span class="attr">title</span>: string;</div><div class="line">    done: boolean;</div><div class="line">    user_id: number;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Carregamento dos Models</strong></p>
<p>Cada <strong>BaseModel</strong> será carregado automaticamente na hora da sua instanciação. Geralmente o model sera carregado quando for usado por um <strong><em>Router</em></strong>, porém o carregamento poderá ser forçado através o <strong>@LoadModel</strong> decorator ou simplemente através do <strong>new</strong>  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@LoadModel(<span class="keyword">new</span> TaskModel())</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersModel</span> <span class="keyword">extends</span> <span class="title">BaseModel</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Adicionando relacionamentos e outras configurações nos Models</strong></p>
<p>Um BaseModel permite sobreescrever o método <em>configure()</em>, que permite acessar a instancia do modelo Sequelize e os modelos já carregados e adicionar lógicas e configurações:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersModel</span> <span class="keyword">extends</span> <span class="title">BaseModel</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line">    public configure(): <span class="keyword">void</span> &#123;</div><div class="line">        <span class="keyword">this</span>.getInstance().beforeCreate(<span class="function">(<span class="params">user: any</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">let</span> salt: string = bcrypt.genSaltSync();</div><div class="line">            user.password = bcrypt.hashSync(user.password, salt);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.getInstance().hasMany(<span class="keyword">this</span>.sequelizeDB.getModel(<span class="string">"Tasks"</span>).getInstance());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Usando decorators para criar relacionamentos</strong></p>
<p>Alguns decorators estãos disponíveis para facilitar a adição dos relacionamentos:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@HasMany(modelName: string)</div><div class="line">@HasOne(modelName: string)</div><div class="line">@BelongsTo(modelName: string)</div><div class="line">@BelongsToMany(modelName: string, <span class="attr">options</span>: Sequelize.AssociationOptionsBelongsToMany)</div></pre></td></tr></table></figure></p>
<p>Estes podem ser usados como nos exemplos abaixo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@HasMany(ModelNames.TASKS)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersModel</span> <span class="keyword">extends</span> <span class="title">BaseModel</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line">    public configure(): <span class="keyword">void</span> &#123;</div><div class="line">        <span class="keyword">this</span>.getInstance().beforeCreate(<span class="function">(<span class="params">user: any</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">let</span> salt: string = bcrypt.genSaltSync();</div><div class="line">            user.password = bcrypt.hashSync(user.password, salt);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@BelongsTo(ModelNames.USERS)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TasksModel</span> <span class="keyword">extends</span> <span class="title">BaseModel</span>&lt;<span class="title">Task</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Para mais informações sobre as possibilidades de configurações e uso dos Models, consultar a documentação do Sequelize: <a href="http://docs.sequelizejs.com/en/v3/" target="_blank" rel="external">http://docs.sequelizejs.com/en/v3/</a></p>
<h2 id="Criando-Middlewares"><a href="#Criando-Middlewares" class="headerlink" title="Criando Middlewares "></a><strong>Criando Middlewares</strong> </h2><p>Criar classe que<br><em>extends</em> Middleware e implementar o método <strong>configMiddlewares()</strong></p>
<p>Exemplo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;Middleware&#125; <span class="keyword">from</span> <span class="string">"./Middleware"</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> bodyParser <span class="keyword">from</span> <span class="string">'body-parser'</span>;</div><div class="line"><span class="keyword">import</span> &#123;Config&#125; <span class="keyword">from</span> <span class="string">"../application/Config"</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultMiddleware</span> <span class="keyword">extends</span> <span class="title">Middleware</span> </span>&#123;</div><div class="line">    private port: number = Config.port;</div><div class="line">    private jsonSpaces: number = <span class="number">2</span>;</div><div class="line"></div><div class="line">public configMiddlewares(): <span class="keyword">void</span> &#123;</div><div class="line">    <span class="keyword">this</span>.express.set(<span class="string">"port"</span>, <span class="keyword">this</span>.port);</div><div class="line">    <span class="keyword">this</span>.express.set(<span class="string">"json spaces"</span>, <span class="keyword">this</span>.jsonSpaces);</div><div class="line">    <span class="keyword">this</span>.express.use(bodyParser.json());</div><div class="line">    <span class="keyword">this</span>.express.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">delete</span> req.body.id;</div><div class="line">        next();</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Middleware de autenticação</strong></p>
<p><strong>Protontype</strong> usa o projeto <a href="http://passportjs.org/" target="_blank" rel="external">passportjs.org</a> para autenticação das rotas.</p>
<p>Um middleware de autenticação deve ser uma classe que <em>extends</em> de <strong>AuthMiddleware</strong> e deve implementar o método:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">authenticate(): express.Handler</div></pre></td></tr></table></figure></p>
<p>O exemplo abaixo demonstra um middleware de autenticação JWT</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTAuthMiddleware</span> <span class="keyword">extends</span> <span class="title">AuthMiddleware</span> </span>&#123;</div><div class="line">    private passportInstance: passport.Passport;</div><div class="line">    private config: SpecificConfig = ProtonConfigLoader.loadConfig();</div><div class="line"></div><div class="line">    public configMiddlewares(): <span class="keyword">void</span> &#123;</div><div class="line">        <span class="keyword">this</span>.passportInstance = passport;</div><div class="line">        <span class="keyword">let</span> userModel: UsersModel = <span class="keyword">this</span>.expressApplication.getModel&lt;UsersModel&gt;(ModelNames.USERS);</div><div class="line"></div><div class="line">        <span class="keyword">let</span> params: StrategyOptions = &#123;</div><div class="line">            <span class="attr">secretOrKey</span>: <span class="keyword">this</span>.config.jwtSecret,</div><div class="line">            <span class="attr">jwtFromRequest</span>: ExtractJwt.fromAuthHeader()</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">const</span> strategy: Strategy = <span class="keyword">new</span> Strategy(params, <span class="keyword">async</span> (payload: any, <span class="attr">done</span>: VerifiedCallback) =&gt; &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">let</span> user: User = <span class="keyword">await</span> userModel.getInstance().findById(payload.id);</div><div class="line">                <span class="keyword">if</span> (user) &#123;</div><div class="line">                    <span class="keyword">return</span> done(<span class="literal">null</span>, &#123;</div><div class="line">                        <span class="attr">id</span>: user.id,</div><div class="line">                        <span class="attr">email</span>: user.email</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">                <span class="keyword">return</span> done(error, <span class="literal">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">this</span>.passportInstance.use(strategy);</div><div class="line">        <span class="keyword">this</span>.expressApplication.getExpress().use(<span class="keyword">this</span>.passportInstance.initialize());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public authenticate(): express.Handler &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.passportInstance.authenticate(<span class="string">"jwt"</span>, <span class="keyword">this</span>.config.jwtSession);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Criando-Routers"><a href="#Criando-Routers" class="headerlink" title="Criando Routers"></a><strong>Criando Routers</strong></h2><ul>
<li>Criar uma classe que<br><em>extends</em> <strong>ExpressRouter</strong> informando a URL base das rotas criadas na classe. </li>
<li>As configurações do Router será feita através do decorator @RouterClass</li>
<li>Criar métodos (funções) anotados com @Route. </li>
<li>Todo método<br>@Route deve ter o formato: <code>nomeMetodo(req, res, model)</code> , sendo o <strong><em>model</em></strong> opcional.</li>
</ul>
<p>Exemplo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;TasksModel&#125; <span class="keyword">from</span> <span class="string">"../models/TasksModel"</span>;</div><div class="line"><span class="keyword">import</span> &#123;Method, Route, ExpressRouter&#125; <span class="keyword">from</span> <span class="string">"protontype"</span>;</div><div class="line"></div><div class="line">@RouterClass(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">"/tasks"</span>,</div><div class="line">    <span class="attr">modelInstances</span>: [<span class="keyword">new</span> TasksModel()]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TasksRouter</span> <span class="keyword">extends</span> <span class="title">ExpressRouter</span> </span>&#123;</div><div class="line">    @Route(&#123;</div><div class="line">        <span class="attr">method</span>: Method.GET,</div><div class="line">        <span class="attr">endpoint</span>: <span class="string">'/'</span>,</div><div class="line">        <span class="attr">modelName</span>: TasksModel.MODEL_NAME,</div><div class="line">        <span class="attr">useAuth</span>: <span class="literal">true</span></div><div class="line">    &#125;)</div><div class="line">    public findAllTasks(req, res, model) &#123;</div><div class="line">        model.findAll(&#123;&#125;)</div><div class="line">            .then(<span class="function"><span class="params">result</span> =&gt;</span> res.json(result))</div><div class="line">            .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="keyword">this</span>.sendErrorMessage(res, error));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Route(&#123;</div><div class="line">        <span class="attr">method</span>: Method.POST,</div><div class="line">        <span class="attr">endpoint</span>: <span class="string">'/'</span>,</div><div class="line">        <span class="attr">modelName</span>: TasksModel.MODEL_NAME</div><div class="line">    &#125;)</div><div class="line">    public createTask(req, res, model) &#123;</div><div class="line">        model.create(req.body)</div><div class="line">            .then(<span class="function"><span class="params">result</span> =&gt;</span> res.json(result))</div><div class="line">            .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="keyword">this</span>.sendErrorMessage(res, error));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Route(&#123;</div><div class="line">        <span class="attr">method</span>: Method.GET,</div><div class="line">        <span class="attr">endpoint</span>: <span class="string">'/:id'</span>,</div><div class="line">        <span class="attr">modelName</span>: TasksModel.MODEL_NAME</div><div class="line">    &#125;)</div><div class="line">    public findOneTask(req, res, model) &#123;</div><div class="line">        model.findOne(&#123;<span class="attr">where</span>: req.params&#125;)</div><div class="line">            .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">                <span class="keyword">if</span> (result) &#123;</div><div class="line">                    res.json(result);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    res.sendStatus(<span class="number">404</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="keyword">this</span>.sendErrorMessage(res, error));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Route(&#123;</div><div class="line">        <span class="attr">method</span>: Method.PUT,</div><div class="line">        <span class="attr">endpoint</span>: <span class="string">'/:id'</span>,</div><div class="line">        <span class="attr">modelName</span>: TasksModel.MODEL_NAME</div><div class="line">    &#125;)</div><div class="line">    public updateTask(req, res, model) &#123;</div><div class="line">        model.update(req.body, &#123;<span class="attr">where</span>: req.params&#125;)</div><div class="line">            .then(<span class="function"><span class="params">result</span> =&gt;</span> res.sendStatus(<span class="number">204</span>))</div><div class="line">            .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="keyword">this</span>.sendErrorMessage(res, error));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Route(&#123;</div><div class="line">        <span class="attr">method</span>: Method.DELETE,</div><div class="line">        <span class="attr">endpoint</span>: <span class="string">'/:id'</span>,</div><div class="line">        <span class="attr">modelName</span>: TasksModel.MODEL_NAME</div><div class="line">    &#125;)</div><div class="line">    public deleteTask(req, res, model) &#123;</div><div class="line">        model.destroy(&#123;<span class="attr">where</span>: req.params&#125;)</div><div class="line">            .then(<span class="function"><span class="params">result</span> =&gt;</span> res.sendStatus(<span class="number">204</span>))</div><div class="line">            .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="keyword">this</span>.sendErrorMessage(res, error));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>A propriedade <figure class="highlight plain"><figcaption><span>boolean ``` indica se a rota será autenticada pelo **middleware de autenticação**, caso este esteja implementado.</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">No decorator @Route, o parâmetro **modelName** é opcional como no exemplo abaixo:</div><div class="line"></div><div class="line">```javascript</div><div class="line"></div><div class="line">@Route(&#123;</div><div class="line">        method: Method.GET,</div><div class="line">        endpoint: &apos;hello&apos;</div><div class="line">&#125;)</div><div class="line">public hello(req, res) &#123;</div><div class="line">    res.json(&apos;Hello!&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Obs</strong>: <em>Caso tenha configurações de rotas com endpoints repetidos, a primeira a<br>ser carregada será usada, as outras serão ignoradas.</em></p>
<h2 id="BaseCrudRouter"><a href="#BaseCrudRouter" class="headerlink" title="BaseCrudRouter"></a><strong>BaseCrudRouter</strong></h2><p>A classe BaseCrudRouter provê<br>as operações básicas de CRUD, sem a necessidade de implementação adicional.</p>
<p>Exemplo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; TasksModel &#125; <span class="keyword">from</span> <span class="string">'../models/TasksModel'</span>;</div><div class="line"><span class="keyword">import</span> &#123; BaseCrudRouter, RouterClass, UseAuth &#125; <span class="keyword">from</span> <span class="string">'protontype'</span>;</div><div class="line"></div><div class="line">@UseAuth()</div><div class="line">@RouterClass(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">"/tasks"</span>,</div><div class="line">    <span class="attr">modelInstances</span>: [<span class="keyword">new</span> TasksModel()]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TasksRouter</span> <span class="keyword">extends</span> <span class="title">BaseCrudRouter</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Esta classe já proverá as rotas:</p>
<ul>
<li><strong>GET /</strong> - Lista todos registros</li>
<li><strong>POST /</strong> - Cria um registro</li>
<li><strong>GET /:id</strong> - Consulta um registro</li>
<li><strong>PUT /:id</strong> - Atualiza um registro</li>
<li><strong>DELETE /:id</strong> - Remove um registro</li>
</ul>
<p>Caso um <strong>BaseCrudRouter</strong> possua mais de uma instacia de Models, serão criadas as rotas para cada instancia, sendo o padrão da url:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/baseUrl/modelName/...</div></pre></td></tr></table></figure></p>
<p>Exemplo:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/tasks/tasksmodel/</div></pre></td></tr></table></figure></p>
<p><strong>Configurando autenticação no</strong> <strong><em>BaseCrudRouter</em></strong></p>
<p>Para hablititar a autenticação em um <strong>BaseCrudRouter</strong> deve-se usar o decorator <figure class="highlight plain"><figcaption><span>Este pode conter os parametros abaixo:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```javascript</div><div class="line"></div><div class="line">@UseAuth(&#123;</div><div class="line">    create: boolean, //Habilita a autenticação para rotas de criação</div><div class="line">    update: boolean, //Habilita a autenticação para rotas de atualização</div><div class="line">    read: boolean,   //Habilita a autenticação para rotas de leitura</div><div class="line">    delete: boolean  //Habilita a autenticação para rotas de remoção</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="Iniciando-aplicacao"><a href="#Iniciando-aplicacao" class="headerlink" title="Iniciando aplicação "></a>Iniciando aplicação </h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">let</span> expressApp = <span class="keyword">new</span> ExpressApplication();</div><div class="line">expressApp</div><div class="line">    .withAuthMiddleware(<span class="keyword">new</span> JWTAuthMiddleware())</div><div class="line">    .addRouter(<span class="keyword">new</span> TasksRouter())</div><div class="line">    .bootstrap();</div></pre></td></tr></table></figure>
<h2 id="Exemplo-de-uso-completo"><a href="#Exemplo-de-uso-completo" class="headerlink" title="Exemplo de uso completo"></a>Exemplo de uso completo</h2><p><strong><a href="https://github.com/linck/protontype-example" target="_blank" rel="external">https://github.com/linck/protontype-example</a></strong></p>
]]></content:encoded>
      
      <comments>http://yoursite.com/2016/11/15/ProtonType/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
